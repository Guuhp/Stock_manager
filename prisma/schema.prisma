// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//generator erd {
//  provider = "prisma-erd-generator"
//}

//generator dbml {
//  provider = "prisma-dbml-generator"
//}

//generator class_validator {
//  provider = "prisma-class-validator-generator"
//  output   = "./out"
//}

//generator prismaClassGenerator {
//  provider = "prisma-class-generator"
//  output   = "./swagger-class"
//}

enum StatusWarehouse {
  EMPTY
  FULL
  REPLACEMENT
}

enum Role {
  USER
  ADMIN
}

enum StatusAccount {
  ACTIVE
  INATIVE
}

model User {
  id String @id @default(uuid())

  email    String @unique
  password String
  role     Role   @default(USER)

  statusAccount StatusAccount @default(INATIVE)

  warehousesUser AssociateUserWarehouse[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}

model Warehouse {
  id String @id @default(uuid())

  name      String
  code      Int    @unique
  telephone String @unique

  usersWarehouse AssociateUserWarehouse[]

  created_at                DateTime                    @default(now())
  updated_at                DateTime                    @updatedAt
  Product                   Product?                    @relation(fields: [productId], references: [id])
  productId                 String?
  AssociateWarehouseProduct AssociateWarehouseProduct[]

  @@map("warehouses")
}

model AssociateUserWarehouse {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId String

  @@map("associate_user_wharehouse")
}

//PRODUTO
model Product {
  id String @id @default(uuid())

  name                String
  unit_of_measurement String
  description         String
  price               Float

  warehouses Warehouse[]

  category          CategoryProduct            @relation(fields: [categoryProductId], references: [id])
  categoryProductId String
  
  ProductSupplier   AssociateProductSupplier[]

  created_at                DateTime                    @default(now())
  updated_at                DateTime                    @updatedAt
  AssociateWarehouseProduct AssociateWarehouseProduct[]

  @@map("products")
}

model AssociateWarehouseProduct {
  id        String    @id @default(uuid())
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])

  product     Product @relation(fields: [productId], references: [id])
  warehouseId String
  productId   String
}

model Supplier {
  id String @id @default(uuid())

  name      String
  email     String @unique
  telephone String
  address   String

  created_at      DateTime                   @default(now())
  updated_at      DateTime                   @updatedAt
  ProductSupplier AssociateProductSupplier[]

  @@map("suppliers")
}

model AssociateProductSupplier {
  id String @id @default(uuid())

  productId String
  products  Product @relation(fields: [productId], references: [id])

  supplierId String
  supplier   Supplier @relation(fields: [supplierId], references: [id])

  @@map("associate_product_supplier")
}

model CategoryProduct {
  id String @id @default(uuid())

  name        String
  description String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Products   Product[]

  @@map("category_products")
}
